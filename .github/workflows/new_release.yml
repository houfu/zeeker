name: Version Bump and Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: 'choice'
        options:
          - patch
          - minor
          - major
      create_release:
        description: 'Create GitHub release'
        type: 'boolean'
        default: true
      release_notes:
        description: 'Release notes (enter the changes for this version)'
        required: false
        default: ''

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '>=3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync

      - name: Bump package version
        id: bump_version
        run: |
          uv run python - <<EOF
          import toml
          import re
          import os
          from pathlib import Path
          
          # Read current version from pyproject.toml
          with open('pyproject.toml', 'r') as f:
              config = toml.load(f)
          
          current_version = config['project']['version']
          version_parts = list(map(int, current_version.split('.')))
          
          # Bump version according to input
          version_type = "${{ github.event.inputs.version_type }}"
          if version_type == 'major':
              version_parts[0] += 1
              version_parts[1] = 0
              version_parts[2] = 0
          elif version_type == 'minor':
              version_parts[1] += 1
              version_parts[2] = 0
          else:  # patch
              version_parts[2] += 1
          
          new_version = '.'.join(map(str, version_parts))
          
          # Update pyproject.toml
          config['project']['version'] = new_version
          with open('pyproject.toml', 'w') as f:
              toml.dump(config, f)
          
          # Update zeeker/__init__.py (create if doesn't exist)
          init_file = Path('zeeker/__init__.py')
          if init_file.exists():
              with open(init_file, 'r') as f:
                  init_content = f.read()
              
              # Add __version__ if it doesn't exist
              if '__version__' not in init_content:
                  init_content = f'__version__ = "{new_version}"\n' + init_content
              else:
                  init_content = re.sub(r'__version__ = ".*"', f'__version__ = "{new_version}"', init_content)
              
              with open(init_file, 'w') as f:
                  f.write(init_content)
          else:
              # Create __init__.py with version
              with open(init_file, 'w') as f:
                  f.write(f'__version__ = "{new_version}"\n')
          
          # Set output for GitHub Actions
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"new_version={new_version}\n")
          
          print(f"Bumped version from {current_version} to {new_version}")
          EOF

      - name: Run tests
        run: |
          uv run pytest

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml zeeker/__init__.py
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
          git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Version ${{ steps.bump_version.outputs.new_version }}"
          git push && git push --tags

  create-release:
    needs: bump-version
    if: ${{ github.event.inputs.create_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "v${{ needs.bump-version.outputs.new_version }}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '>=3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build package
        run: |
          uv build

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "## Changes since $LAST_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s" $LAST_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "- First release of Zeeker Database Customization Tool" >> CHANGELOG.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.bump-version.outputs.new_version }}"
          name: "Release v${{ needs.bump-version.outputs.new_version }}"
          body: |
            ${{ github.event.inputs.release_notes || format('Version {0}', needs.bump-version.outputs.new_version) }}
            
            ### Installation
            ```bash
            pip install zeeker
            # or
            uv add zeeker
            ```
            
            ### What's Changed
            ${{ steps.changelog.outputs.content }}
          files: |
            dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
